import java.util.ArrayList;

public class Tree {
	class TreeNode {
		private int value;
		TreeNode leftChild;
		TreeNode rightChild;
		
		public TreeNode(int value) {
			this.value = value;
		}
	}
	private TreeNode root;
	
	public TreeNode addRecursively(TreeNode current, int value) {
		if (current == null ) {
			return new TreeNode(value);
		}
		if (value<current.value) {
			current.leftChild = addRecursively(current.leftChild, value);
		}
		else if (value>current.value) {
			current.rightChild = addRecursively(current.rightChild, value);
		}
		else {
			return current;
		}
		return current;
	}
	
	public void add(int value) {
	    root = addRecursively(root, value);
	}
	
	public TreeNode findCommonAncestor(TreeNode root, TreeNode nodeA, TreeNode nodeB) {
		if (root == null) {
			return null;
		}
		if (root.value>nodeA.value && root.value>nodeB.value) {
			return findCommonAncestor(root.leftChild, nodeA, nodeB);
		}
		if (root.value<nodeA.value && root.value<nodeB.value ) {
			return findCommonAncestor(root.rightChild, nodeA, nodeB);
		}
	}
	
	public void inOrderTraverse (TreeNode root){ // Each child of a tree is a root of its subtree.
	    if (root.leftChild != null){
	        inOrderTraverse (root.leftChild);
	    }
	    System.out.println(root.value);
	    if (root.rightChild != null){
	        inOrderTraverse (root.rightChild);
	    }
	}
	public void preOrderTraverse(TreeNode root) {
		System.out.println(root.value);
		if (root.leftChild != null){
			preOrderTraverse (root.leftChild);
		}
		if (root.rightChild != null){
	        preOrderTraverse (root.rightChild);
	    }
		
	}
	
	public static void main(String[] args) {
		Tree test = new Tree();
		test.add(6);
		test.add(4);
		test.add(8);
		test.add(7);
		test.add(5);
		test.inOrderTraverse(test.root);
		System.out.println("");
		test.preOrderTraverse(test.root);
	}
	
	
	

}
