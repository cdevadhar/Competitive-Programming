import java.util.ArrayList;

public class Tree {
	class TreeNode {
		private int value;
		TreeNode leftChild;
		TreeNode rightChild;
		
		public TreeNode(int value) {
			this.value = value;
		}
	}
	private static TreeNode root;
	
	public TreeNode addRecursively(TreeNode current, int value) {
		if (current == null ) {
			return new TreeNode(value);
		}
		if (value<current.value) {
			current.leftChild = addRecursively(current.leftChild, value);
		}
		else if (value>current.value) {
			current.rightChild = addRecursively(current.rightChild, value);
		}
		else {
			return current;
		}
		return current;
	}
	
	public void add(int value) {
	    root = addRecursively(root, value);
	}
	
	public TreeNode findCommonAncestor(TreeNode nodeA, TreeNode nodeB) {
		ArrayList<TreeNode> pathToA = new ArrayList<TreeNode>();
		ArrayList<TreeNode> pathToB = new ArrayList<TreeNode>();
		TreeNode current = root;
		
		while(current!=null) {
			pathToA.add(current);
			
		}
		return current;
	}
	
	public void traverse (TreeNode root){ // Each child of a tree is a root of its subtree.
	    if (root.leftChild != null){
	        traverse (root.leftChild);
	    }
	    System.out.println(root.value);
	    if (root.rightChild != null){
	        traverse (root.rightChild);
	    }
	}
	
	public static void main(String[] args) {
		Tree test = new Tree();
		test.add(6);
		test.add(4);
		test.add(8);
		test.add(7);
		test.add(5);
		test.traverse(root);
	}
	
	
	

}
