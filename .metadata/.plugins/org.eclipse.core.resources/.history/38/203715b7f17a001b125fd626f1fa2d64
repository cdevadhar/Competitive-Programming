import java.io.*;
import java.util.*;
public class Comfortable {
	static int n;
	static boolean[][] pasture;
	static Scanner in;
	public static void main(String[] args) {
		in = new Scanner(System.in);
		n = in.nextInt();
		pasture = new boolean[1000][1000];
		for (int i=0; i<n; i++) {
			int a = in.nextInt();
			int b = in.nextInt();
			pasture[a][b] = true;
			
		}
		for (int i=0; i<n; i++) {
			for (int j=0; j<n; j++) {
				System.out.print(pasture[i][j] + " ");
			}
			System.out.println();
		}
//		cycle();
	}
	
	public static void makeUncomfortable(int row, int col) {
		(pasture[row+1][col])=true;
		(pasture[row-1][col])=true;
		(pasture[row][col+1])=true;
		(pasture[row][col-1])=true;
	}
	
	public static boolean isComfortable(int row, int col) {
		int neighbors = 0;
		if (row<n-1) {
			if (pasture[row+1][col]) neighbors++;
		}
		
		if (row>0) {
			if (pasture[row-1][col]) neighbors++;
		}
		
		if (col<n-1) {
			if (pasture[row][col+1]) neighbors++;
		}
		
		if (col>0) {
			if (pasture[row][col-1]) neighbors++;
		}
		
		if (neighbors==3) return true;
		return false;
	}
	
	public static int countComfortable() {
		int result=0;
		for (int i=0; i<n; i++) {
			for (int j=0; j<n; j++) {
				if (isComfortable(i, j)) {
					result++;
//					makeUncomfortable(i, j);
				}
			}
		}
		return result;
	}
	
	public static void cycle() {
		int result = 0;
		int a = countComfortable();
		result+=a;
		while (a>0) {
			int i = countComfortable();
			a=i;
			result+=i;
		}
		System.out.println(result);
	}
}
