import java.io.*;
import java.util.*;

public class Collisions {
	public static void main(String[] args) throws Exception {
		FastIO in = new FastIO();
		int t = in.nextInt();
		for (int tc=0; tc<t; tc++) {
			int n = in.nextInt();
			int m = in.nextInt();
			int[][] robotData = new int[n][2];
			for (int i=0; i<n; i++) {
				robotData[i][0] = in.nextInt();
			}
			for (int i=0; i<n; i++) {
				String s = in.next();
				if (s.equals("L")) robotData[i][1] = -1;
				else robotData[i][1] = 1;
			}
			ArrayList<Robot> evenRobots = new ArrayList<Robot>();
			ArrayList<Robot> oddRobots = new ArrayList<Robot>();
			for (int i=0; i<n; i++) {
				Robot r = new Robot(robotData[i][0], robotData[i][1]);
				if (robotData[i][0]%2==0) {
					evenRobots.add(r);
				}
				else oddRobots.add(r);
			}
			Stack<Integer> rightRobots = new Stack<Integer>();
			for (int i=0; i<evenRobots.size(); i++) {
				
			}
		}
	}
	static class Robot {
		int start, direction;
		public Robot(int start, int direction) {
			this.start = start;
			this.direction = direction;
		}
	}
	static class FastIO {
		BufferedReader br;
	    StringTokenizer st;
	    public FastIO() throws IOException
	    {
	        br = new BufferedReader(
	            new InputStreamReader(System.in));

	    }
	    

	    public String next() throws IOException
	    {
	        while (st == null || !st.hasMoreElements()) {
	           
	            st = new StringTokenizer(br.readLine());
	        }
	        return st.nextToken();
	    }

	    public int nextInt() throws NumberFormatException, IOException { return Integer.parseInt(next()); }

	    public long nextLong() throws NumberFormatException, IOException { return Long.parseLong(next()); }

	    public double nextDouble() throws NumberFormatException, IOException
	    {
	        return Double.parseDouble(next());
	    }

	    public String nextLine() throws IOException
	    {
	        String str = br.readLine();
	        return str;
	    }
	}
}
