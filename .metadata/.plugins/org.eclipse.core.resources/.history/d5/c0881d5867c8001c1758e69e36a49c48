import java.util.*;
import java.io.*;

public class Letters {
	public static void main(String[] args) throws Exception {
		FastIO in = new FastIO();
		int t = in.nextInt();
		for (int tc=0; tc<t; tc++) {
			int n = in.nextInt();
			String[] words = new String[n];
			boolean works = true;
			for (int i=0; i<n; i++) {
				words[i] = in.next();
				if (!check(words[i])) {
					works = false;
				}
			}
			if (!works) System.out.println("IMPOSSIBLE");
			else {
				String tower = words[0];
				Arrays.parallelSort(words, (o1, o2) -> {
					
					return o1.compareTo(o2);
				});
			}
		}
	}
	public static boolean check(String s) {
		boolean[] occ = new boolean[26];
		for (int i=0; i<s.length(); i++) {
			if (occ[s.charAt(i)-'a'] && i>0 && s.charAt(i-1)!=s.charAt(i)) {
				return false;
			}
			occ[s.charAt(i)-'a'] = true;
		}
		return true;
	}
	static class FastIO {
		BufferedReader br;
	    StringTokenizer st;
	    PrintWriter pr;
	    public FastIO() throws IOException
	    {
	        br = new BufferedReader(
	           new InputStreamReader(System.in));
	        pr = new PrintWriter(System.out);
	    }
	    

	    public String next() throws IOException
	    {
	        while (st == null || !st.hasMoreElements()) {
	           
	            st = new StringTokenizer(br.readLine());
	        }
	        return st.nextToken();
	    }

	    public int nextInt() throws NumberFormatException, IOException { return Integer.parseInt(next()); }

	    public long nextLong() throws NumberFormatException, IOException { return Long.parseLong(next()); }

	    public double nextDouble() throws NumberFormatException, IOException
	    {
	        return Double.parseDouble(next());
	    }

	    public String nextLine() throws IOException
	    {
	        String str = br.readLine();
	        return str;
	    }
	}
}
