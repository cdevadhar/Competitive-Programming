import java.io.*;
import java.util.*;

public class GoingHome {
	public static void main(String[] args) throws Exception {
		FastIO in = new FastIO();
		int n = in.nextInt();
		int[] nums = new int[n];
		HashMap<Integer, ArrayList<Pair>> map = new HashMap<Integer, ArrayList<Pair>>();
		int[] ans = new int[4];
		for (int i=0; i<n; i++) {
			for (int j=i+1; j<n; j++) {
				map.putIfAbsent(nums[i]+nums[j], new ArrayList<Pair>());
				ArrayList<Pair> curr = map.get(nums[i]+nums[j]);
				for (Pair p: curr) {
					System.out.println(p.a+p.b + " " + (nums[i]+nums[j]));
					if (!p.equals(new Pair(i, j))) {
						ans[0] = p.a;
						ans[1] = p.b;
						ans[2] = i;
						ans[3] = j;
						break;
					}
				}
				curr.add(new Pair(i, j));
				map.put(nums[i]+nums[j], curr);
			}
		}
		if (ans[0]==0 && ans[1]==0) System.out.println("NO");
		else {
			System.out.println("YES");
			for (int x: ans) System.out.print(x+" ");
		}
	}
	static class Pair {
		int a, b;
		public Pair(int a, int b) {
			this.a = a;
			this.b = b;
		}
		@Override
		public int hashCode() {
			return 10*a + b;
		}
		@Override
		public boolean equals(Object other) {
			Pair p = (Pair)other;
			return p.a==b || p.b==a || p.a==a || p.b==b;
		}
	}
	static class FastIO {
		BufferedReader br;
	    StringTokenizer st;
	    public FastIO() throws IOException
	    {
	        br = new BufferedReader(
	            new InputStreamReader(System.in));

	    }
	    

	    public String next() throws IOException
	    {
	        while (st == null || !st.hasMoreElements()) {
	           
	            st = new StringTokenizer(br.readLine());
	        }
	        return st.nextToken();
	    }

	    public int nextInt() throws NumberFormatException, IOException { return Integer.parseInt(next()); }

	    public long nextLong() throws NumberFormatException, IOException { return Long.parseLong(next()); }

	    public double nextDouble() throws NumberFormatException, IOException
	    {
	        return Double.parseDouble(next());
	    }

	    public String nextLine() throws IOException
	    {
	        String str = br.readLine();
	        return str;
	    }
	}
}
