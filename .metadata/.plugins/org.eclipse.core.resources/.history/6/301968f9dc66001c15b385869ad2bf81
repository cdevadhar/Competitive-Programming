import java.io.*;
import java.util.*;
public class ClosestCow {
	static int k, m, n;
	static int[] nhojCows;
	static ArrayList<Patch> patches;
	public static void main(String[] args) throws Exception {
		FastIO in = new FastIO();
		k = in.nextInt();
		m = in.nextInt();
		n = in.nextInt();
		nhojCows = new int[m];
		patches = new ArrayList<Patch>();
		for (int i=0; i<k; i++) {
			int p = in.nextInt();
			int t = in.nextInt();
			Patch patch = new Patch(p, t);
			patches.add(patch);
		}
		for (int i=0; i<m; i++) {
			nhojCows[i] = in.nextInt();
		}
		Arrays.parallelSort(nhojCows);
		Collections.sort(patches, (o1, o2) -> Integer.compare(o1.location, o2.location));
		for (int i=0; i<k; i++) {
			int index = Arrays.binarySearch(nhojCows, patches.get(i).location);
			if (index>0) {
				patches.get(i).closestLeft = -1*(index+2);
			}
			if (index<m-1) {
				patches.get(i).closestRight = -1*(index+1);
			}
		}
		
		for (int i=0; i<k; i++) {
			
		}
	}
	static class Patch {
		int location, tastiness;
		int closestLeft, closestRight;
		public Patch(int location, int tastiness) {
			this.location = location;
			this.tastiness = tastiness;
		}
	}
	static class FastIO {
		BufferedReader br;
	    StringTokenizer st;
	    public FastIO() throws IOException
	    {
	        br = new BufferedReader(
	            new InputStreamReader(System.in));

	    }
	    

	    public String next() throws IOException
	    {
	        while (st == null || !st.hasMoreElements()) {
	           
	            st = new StringTokenizer(br.readLine());
	        }
	        return st.nextToken();
	    }

	    public int nextInt() throws NumberFormatException, IOException { return Integer.parseInt(next()); }

	    public long nextLong() throws NumberFormatException, IOException { return Long.parseLong(next()); }

	    public double nextDouble() throws NumberFormatException, IOException
	    {
	        return Double.parseDouble(next());
	    }

	    public String nextLine() throws IOException
	    {
	        String str = br.readLine();
	        return str;
	    }
	}
}
