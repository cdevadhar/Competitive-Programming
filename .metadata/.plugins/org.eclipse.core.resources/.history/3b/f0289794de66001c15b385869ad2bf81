import java.io.*;
import java.util.*;
public class ClosestCow {
	public static void main(String[] args) throws Exception {
		FastIO in = new FastIO();
		int k = in.nextInt();
		int m = in.nextInt();
		int n = in.nextInt();
		ArrayList<Event> events = new ArrayList<Event>();
		for (int i=0; i<k; i++) {
			int pos = in.nextInt();
			int taste = in.nextInt();
			events.add(new Event(pos, true, taste));
		}
		for (int i=0; i<m; i++) {
			int pos = in.nextInt();
			events.add(new Event(pos, false, -1));
		}
		Collections.sort(events, (o1, o2) -> Integer.compare(o1.position, o2.position));
	}
	static class Event {
		int position, taste;
		boolean isPatch;
		public Event(int position, boolean isPatch, int taste) {
			this.position = position;
			this.isPatch = isPatch;
			this.taste = taste;
		}
	}
	static class FastIO {
		BufferedReader br;
	    StringTokenizer st;
	    public FastIO() throws IOException
	    {
	        br = new BufferedReader(
	            new InputStreamReader(System.in));

	    }
	    

	    public String next() throws IOException
	    {
	        while (st == null || !st.hasMoreElements()) {
	           
	            st = new StringTokenizer(br.readLine());
	        }
	        return st.nextToken();
	    }

	    public int nextInt() throws NumberFormatException, IOException { return Integer.parseInt(next()); }

	    public long nextLong() throws NumberFormatException, IOException { return Long.parseLong(next()); }

	    public double nextDouble() throws NumberFormatException, IOException
	    {
	        return Double.parseDouble(next());
	    }

	    public String nextLine() throws IOException
	    {
	        String str = br.readLine();
	        return str;
	    }
	}
}
