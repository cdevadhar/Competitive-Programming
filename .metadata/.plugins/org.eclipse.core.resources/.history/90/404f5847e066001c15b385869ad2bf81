import java.io.*;
import java.util.*;
public class ClosestCow {
	public static void main(String[] args) throws Exception {
		FastIO in = new FastIO();
		int k = in.nextInt();
		int m = in.nextInt();
		int n = in.nextInt();
		ArrayList<Event> events = new ArrayList<Event>();
		for (int i=0; i<k; i++) {
			int pos = in.nextInt();
			int taste = in.nextInt();
			events.add(new Event(pos, true, taste));
		}
		for (int i=0; i<m; i++) {
			int pos = in.nextInt();
			events.add(new Event(pos, false, -1));
		}
		Collections.sort(events, (o1, o2) -> Integer.compare(o1.position, o2.position));
		ArrayList<Event> currPatches = new ArrayList<Event>();
		ArrayList<Integer> possibleCows = new ArrayList<Integer>();
		int index = 0;
		int left = 0;
		int right = 0;
		int cowsSeen = 0;
		int currTaste = 0;
		while (index<events.size()) {
			Event curr = events.get(index);
			System.out.println("test");
			if (curr.isPatch) {
				System.out.println(curr.taste);
				currPatches.add(curr);
				currTaste+=curr.taste;
			}
			else {
				if (cowsSeen==0) {
					possibleCows.add(currTaste);
					currTaste = 0;
					currPatches.clear();
					left = curr.position;
				}
				else {
					if (currPatches.size()==0) break;
					int taste = maxTaste(left, curr.position, currPatches);
					possibleCows.add(taste);
					possibleCows.add(currTaste-taste);
					left = curr.position;
					currPatches.clear();
					currTaste = 0;
				}
				cowsSeen++;
			}
			index++;
		}
		Collections.sort(possibleCows);
		Collections.reverse(possibleCows);
		int sum = 0;
		for (int i=0; i<n && i<possibleCows.size(); i++) {
			sum+=possibleCows.get(i);
		}
		System.out.println(sum);
	}
	public static int maxTaste(int left, int right, ArrayList<Event> patches) {
		int maxTaste = 0;
		int front = 0;
		int back = 0;
		int currTaste = patches.get(0).taste;
		while (front<patches.size() && back<patches.size()) {
			double distance = (double)(patches.get(back).position-patches.get(front).position)/2;
			if (distance<patches.get(front).position-left && right-distance<patches.get(back).position) {
				maxTaste = Math.max(maxTaste, currTaste);
				back++;
			}
			else {
				front++;
				if (front>back) back++;
			}
		}
		return maxTaste;
	}
	static class Event {
		int position, taste;
		boolean isPatch;
		public Event(int position, boolean isPatch, int taste) {
			this.position = position;
			this.isPatch = isPatch;
			this.taste = taste;
		}
	}
	static class FastIO {
		BufferedReader br;
	    StringTokenizer st;
	    public FastIO() throws IOException
	    {
	        br = new BufferedReader(
	            new InputStreamReader(System.in));

	    }
	    

	    public String next() throws IOException
	    {
	        while (st == null || !st.hasMoreElements()) {
	           
	            st = new StringTokenizer(br.readLine());
	        }
	        return st.nextToken();
	    }

	    public int nextInt() throws NumberFormatException, IOException { return Integer.parseInt(next()); }

	    public long nextLong() throws NumberFormatException, IOException { return Long.parseLong(next()); }

	    public double nextDouble() throws NumberFormatException, IOException
	    {
	        return Double.parseDouble(next());
	    }

	    public String nextLine() throws IOException
	    {
	        String str = br.readLine();
	        return str;
	    }
	}
}
